
require 'Coat'

singleton 'Smc.C'
extends 'Smc.Language'

has.id              = { '+', default = 'C' }
has.name            = { '+', default = 'C' }
has.option          = { '+', default = '-c' }
has.suffix          = { '+', default = '_sm' }
has.generator       = { '+', isa = 'Smc.C.Generator',
                        default = function () return require 'Smc.C.Generator' end }
has.headerFlag      = { '+', default = true }


class 'Smc.C.Generator'
extends 'Smc.Generator'

has.suffix          = { '+', default = 'c' }
has.scopeSep        = { '+', default = '_' }
has.next_generator  = { '+', isa = 'Smc.C.HeaderGenerator',
                        default = function () return require 'Smc.C.HeaderGenerator' end }
has.context         = { is = 'ro', isa = 'string' }

function method:_build_template ()
    return CodeGen{
        TOP = [[
/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://github.com/fperrad/lua-Smc)
 * from file : ${fsm.filename}
 */

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
]],
    }
end


class 'Smc.C.HeaderGenerator'
extends 'Smc.Generator'

has.suffix          = { '+', default = 'h' }
has.context         = { is = 'ro', isa = 'string' } -- XXX

function method:_build_template ()
    return CodeGen{
        TOP = [[
/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://github.com/fperrad/lua-Smc)
 * from file : ${fsm.filename}
 */

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
]],
    }
end

