
require 'Coat'
local CodeGen = require 'CodeGen'

singleton 'Smc.JavaScript'
extends 'Smc.Language'

has.id              = { '+', default = 'JS' }
has.name            = { '+', default = 'JavaScript' }
has.option          = { '+', default = '-js' }
has.suffix          = { '+', default = '_sm' }
has.generator       = { '+', isa = 'Smc.JavaScript.Generator',
                        default = function () return require 'Smc.JavaScript.Generator' end }
has.reflectFlag     = { '+', default = true }


class 'Smc.JavaScript.Generator'
extends 'Smc.Generator'

has.suffix          = { '+', default = 'js' }

function method:_build_template ()
    return CodeGen{
        TOP = [[
/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://github.com/fperrad/lua-Smc)
 * from file : ${fsm.filename}
 */

${_preamble()}
${_base_state()}
${_states()}
${_context()}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
]],
        _preamble = [[
${fsm.source}
${fsm.importList/_import()}
]],
            _import = [[
require('${it}');
]],
        _base_state = [[

function ${fsm.context}State () {}
${fsm.context}State.prototype = new State();

var _empty = function () {};
${fsm.context}State.prototype.Entry = _empty;
${fsm.context}State.prototype.Exit = _empty;

var _default = function (fsm) {
    this.Default(fsm);
};
${fsm.transitions/_transition_base_state()}

${fsm.context}State.prototype.Default = function (fsm) {
    ${generator.debugLevel0?_base_state_debug()}
    var msg = "Undefined Transition\nState: "
            + fsm.getState().name
            + "\nTransition: "
            + fsm.transition
            + "\n";
    throw new Error(msg);
};
${generator.reflectFlag?_base_state_reflect()}
]],
            _transition_base_state = "${isntDefault?_transition_base_state_if()}\n",
            _transition_base_state_if = [[
${fsm.context}State.prototype.${name} = _default;
]],
                _parameter_proto = ", ${name}",
            _base_state_debug = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("TRANSITION      : Default()\n");
}
]],
            _base_state_reflect = [[

${fsm.context}State.prototype.getTransitions = function () {
    return this.transitions;
};
]],
        _states = [[

${fsm.maps/_map()}
]],
        _map = [[

function ${name}_DefaultState (name, id) {
    State.call(this, name, id);
}
${name}_DefaultState.prototype = new ${fsm.context}State();

var ${name} = {}
${name}.DefaultState = new ${name}_DefaultState('${fullName}::DefaultState', -1);
${defaultState?_map_default_state()}
${generator.reflectFlag?_default_state_reflect()}
${states/_state()}
]],
            _map_default_state = "${defaultState.transitions/_transition()}",
            _default_state_reflect = [[

${name}.DefaultState.transitions = {
    ${reflect/_reflect()}
};
]],
        _state = [[

function ${map.name}_${name} (name, id) {
    State.call(this, name, id);
}
${map.name}_${name}.prototype = ${map.name}.DefaultState;

${map.name}.${name} = new ${map.name}_${name}('${fullName}', ${map.nextStateId});
${entryActions?_state_entry()}
${exitActions?_state_exit()}
${transitions/_transition()}
${generator.reflectFlag?_state_reflect()}
]],
            _state_entry = [[

${map.name}.${name}.Entry = function (fsm) {
    var ctxt = fsm.owner;
    ${entryActions/_action()}
};
]],
            _state_exit = [[

${map.name}.${name}.Exit = function (fsm) {
    var ctxt = fsm.owner
    ${exitActions/_action()}
};
]],
            _state_reflect = [[

${map.name}.${name}.transitions = {
    ${reflect/_reflect()}
};
]],
                _reflect = [[
'${name}': ${def},
]],
        _transition = [[

${state.map.name}.${state.name}.${name} = function (fsm${parameters/_parameter_proto()}) {
    ${hasCtxtReference?_transition_ctxt()}
    ${generator.debugLevel0?_transition_debug()}
    ${guards/_guard()}
    ${needFinalElse?_transition_else()}
};
]],
            _transition_ctxt = [[
var ctxt = fsm.owner;
]],
            _transition_debug = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("LEAVING STATE   : ${state.fullName}\n");
}
]],
            _transition_else = "${state.isDefault?_transition_else_d()!_transition_else_o()}",
            _transition_else_d = [[
else {
    ${state.map.name}.DefaultState.Default(fsm);
}
]],
            _transition_else_o = [[
else {
    ${map.name}.DefaultState.${name}(fsm${parameters/_parameter_proto()});
}
]],
        _guard = "${isConditional?_guard_conditional()!_guard_unconditional()}",
            _guard_conditional = "${ifCondition?_guard_if()!_guard_no_if()}",
            _guard_no_if = "${elseifCondition?_guard_elseif()!_guard_else()}",
            _guard_unconditional = [[
${_guard_core()}
]],
            _guard_if = [[
if (${condition}) {
    ${_guard_core()}
}
]],
            _guard_elseif = [[

else if (${condition}) {
    ${_guard_core()}
}
]],
            _guard_else = [[

else {
    ${_guard_core()}
}
]],
            _guard_core = [[
${needVarEndState?_guard_end_state()}
${doesExit?_guard_exit()}
${generator.debugLevel0?_guard_debug_enter()}
${hasActions?_guard_actions()!_guard_no_action()}
${doesEndPop?_guard_end_pop()}
]],
                _guard_end_state = [[
var endState = fsm.getState();
]],
                _guard_exit = [[
${generator.debugLevel1?_guard_debug_before_exit()}
fsm.getState().Exit(fsm);
${generator.debugLevel1?_guard_debug_after_exit()}
]],
                    _guard_debug_before_exit = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("BEFORE EXIT     : ${transition.state.fullName}.Exit()\n");
}
]],
                    _guard_debug_after_exit = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("AFTER EXIT      : ${transition.state.fullName}.Exit()\n");
}
]],
                _guard_debug_enter = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("ENTER TRANSITION: ${transition.state.fullName}.${transition.name}(${transition.parameters/_guard_debug_param(); separator=', '})\n");
}
]],
                    _guard_debug_param = "${name}",
                _guard_no_action = "${isConditional?_guard_no_action_if()}",
                    _guard_no_action_if = [[
// No actions.
]],
                _guard_actions = [[
fsm.clearState();
${generator.catchFlag?_guard_actions_protected()!_guard_actions_not_protected()}
]],
                    _guard_actions_protected = [[
try {
    ${actions/_action()}
}
finally {
    ${_guard_final()}
}
]],
                    _guard_actions_not_protected = [[
${actions/_action()}
${_guard_final()}
]],
                        _guard_final = [[
${generator.debugLevel0?_guard_debug_exit()}
${doesSet?_guard_set()}
${doesPush?_guard_push()}
${doesPop?_guard_pop()}
${doesEntry?_guard_entry()}
]],
                _guard_debug_exit = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("EXIT TRANSITION : ${transition.state.fullName}.${transition.name}(${transition.parameters/_guard_debug_param(); separator=', '})\n");
}
]],
                _guard_set = [[
fsm.setState(${needVarEndState?_end_state_var()!_end_state_no_var()});
]],
                    _end_state_var = "endState",
                    _end_state_no_var = "${endStateName; format=scoped}",
                _guard_push = [[
${doesPushSet?_guard_set()}
${doesPushEntry?_guard_entry()}
fsm.pushState(${pushStateName; format=scoped});
]],
                _guard_pop = [[
fsm.popState();
]],
                _guard_entry = [[
${generator.debugLevel1?_guard_debug_before_entry()}
fsm.getState().Entry(fsm);
${generator.debugLevel1?_guard_debug_after_entry()}
]],
                    _guard_debug_before_entry = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("BEFORE ENTRY    : ${transition.state.fullName}.Entry()\n");
}
]],
                    _guard_debug_after_entry = [[
if (fsm.debugFlag) {
    fsm.debugStream.write("AFTER ENTRY     : ${transition.state.fullName}.Entry()\n");
}
]],
                _guard_end_pop = [[
fsm.${endStateName}(${popArgs});
]],
        _action = "${propertyFlag?_action_prop()!_action_no_prop()}\n",
            _action_no_prop = "${isEmptyStateStack?_action_ess()!_action_no_ess()}",
            _action_prop = [[
ctxt.${name} = ${arguments};
]],
            _action_ess = [[
fsm.emptyStateStack();
]],
            _action_no_ess = [[
ctxt.${name}(${arguments; separator=', '});
]],
        _context = [[

function ${fsm.fsmClassname} (owner) {
    FSMContext.call(this, ${fsm.startState; format=scoped});
    this.owner = owner;
};
${fsm.fsmClassname}.prototype = new FSMContext();
try {
    global.${fsm.fsmClassname} = ${fsm.fsmClassname};
} catch (ex) {}

${fsm.transitions/_transition_context()}

${fsm.fsmClassname}.prototype.enterStartState = function () {
    this.getState().Entry(this);
};

${generator.reflectFlag?_context_reflect()}
]],
            scoped = function (str) return str:gsub('::','.') end,
            _transition_context = "${isntDefault?_transition_context_if()}\n",
            _transition_context_if = [[

${fsm.fsmClassname}.prototype.${name} = function (${parameters/_parameter_proto_context(); separator=", "}) {
    this.transition = '${name}';
    this.getState().${name}(this${parameters/_parameter_call()});
    this.transition = '';
};
]],
                _parameter_proto_context = "${name}",
                _parameter_call = ", ${name}",
            _context_reflect = [[

${fsm.fsmClassname}.prototype.states = [
    ${fsm.maps/_map_context_reflect()}
];
${fsm.fsmClassname}.prototype.getStates = function () {
    return this.prototype.states;
};

${fsm.fsmClassname}.prototype.transitions = [
    ${fsm.transitions/_transition_context_reflect()}
];
${fsm.fsmClassname}.prototype.getTransitions = function () {
    return this.prototype.transitions;
};
]],
                _map_context_reflect = "${states/_state_context_reflect()}\n",
                     _state_context_reflect = [[
${map.name}.${name},
]],
                _transition_context_reflect = [[
'${name}',
]],
    }
end
