
require 'Coat'

singleton 'Smc.Cpp'
extends 'Smc.Language'

has.id              = { '+', default = 'C_PLUS_PLUS' }
has.name            = { '+', default = 'C++' }
has.option          = { '+', default = '-c++' }
has.suffix          = { '+', default = '_sm' }
has.generator       = { '+', isa = 'Smc.Cpp.Generator',
                        default = function () return require 'Smc.Cpp.Generator' end }
has.castFlag        = { '+', default = true }
has.headerFlag      = { '+', default = true }
has.noExceptionFlag = { '+', default = true }
has.noStreamFlag    = { '+', default = true }
has.serialFlag      = { '+', default = true }
has.castTypes       = { '+', default = {
                                dynamic_cast = true,
                                static_cast = true,
                                reinterpret_cast = true } }


class 'Smc.Cpp.Generator'
extends 'Smc.Generator'

has.suffix          = { '+', default = 'cpp' }
has.next_generator  = { '+', isa = 'Smc.Cpp.HeaderGenerator',
                        default = function () return require 'Smc.Cpp.HeaderGenerator' end }

function method:_build_template ()
    return CodeGen{
        TOP = [[
/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://github.com/fperrad/lua-Smc)
 * from file : ${fsm.filename}
 */

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
]],
    }
end


class 'Smc.Cpp.HeaderGenerator'
extends 'Smc.Generator'

has.suffix          = { '+', default = 'hpp' }

function method:_build_template ()
    return CodeGen{
        TOP = [[
/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://github.com/fperrad/lua-Smc)
 * from file : ${fsm.filename}
 */

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
]],
    }
end
